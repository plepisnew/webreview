@baseUrl = http://localhost:3000/api/v1
@resource = admins
@objectId = 6317bb727589b131e438fa38


#################################
############## GET ##############
#################################

### Get a list of all admins: 200
GET {{baseUrl}}/{{resource}} HTTP/1.1

### Get an admin by its username: 200
GET {{baseUrl}}/{{resource}}?username=admin HTTP/1.1

### Get an admin by its username which doesn't exist: 404
GET {{baseUrl}}/{{resource}}?username=this+doesnt+exist HTTP/1.1

### Get an admin by its id: 200
GET {{baseUrl}}/{{resource}}/{{objectId}} HTTP/1.1

### Get an admin by its id which doesn't exist: 404
GET {{baseUrl}}/{{resource}}/63178eff73a9885d248f9b76 HTTP/1.1

### Get an admin by its id which isn't a valid ObjectId: 400
GET {{baseUrl}}/{{resource}}/1337 HTTP/1.1

### (!) Same ObjectId error handling applies to all other HTTP methods

##################################
############## POST ##############
##################################

### Create an admin: 200
### Create an admin with an existing username: 400
POST {{baseUrl}}/{{resource}} HTTP/1.1
Content-Type: application/json

{
    "username": "admin",
    "password": "password",
    "description": "description",
    "profilePictureSrc": "/images/admin.png"
}

### Create an admin with a missing optional field: 200
POST {{baseUrl}}/{{resource}} HTTP/1.1
Content-Type: application/json

{
    "username": "heisenburger",
    "password": "password",
    "description": "jesse i have become south america"
}

### Create an admin with a missing required field: 400
POST {{baseUrl}}/{{resource}} HTTP/1.1
Content-Type: application/json

{
    "password": "123"
}

###################################
############# DELETE ##############
###################################

### Delete all admins: 200
DELETE {{baseUrl}}/{{resource}} HTTP/1.1

### Delete an admin by username: 200
DELETE {{baseUrl}}/{{resource}}?username=admin HTTP/1.1

### Delete an admin by id: 200
DELETE {{baseUrl}}/{{resource}}/{{objectId}} HTTP/1.1

###############################
############ PUT ##############
###############################

### Replace an admin by id: 200
PUT {{baseUrl}}/{{resource}}/{{objectId}} HTTP/1.1
Content-Type: application/json

{
    "username": "newUser",
    "password": "newPassword",
    "description": "newDescription",
    "profilePictureSrc": "newImage.png"
}

### Replace an admin by id with missing optional fields: 200 (fields become defaults)
PUT {{baseUrl}}/{{resource}}/{{objectId}} HTTP/1.1
Content-Type: application/json

{
    "username": "newUser",
    "password": "newPassword"
}

### Replace an admin by id with missing required fields: 400
PUT {{baseUrl}}/{{resource}}/{{objectId}} HTTP/1.1
Content-Type: application/json

{
    "username": "newUser"
}

##################################
############# PATCH ##############
##################################

### Update an admin by id: 200
PATCH {{baseUrl}}/{{resource}}/{{objectId}} HTTP/1.1
Content-Type: application/json

{
    "username": "updatedUser",
    "description": "updatedDescription"
}

### Update an admin by id with excessive fields: 200
PATCH {{baseUrl}}/{{resource}}/{{objectId}} HTTP/1.1
Content-Type: application/json

{
    "profilePictureSrc": "images/src.png",
    "kinda": "based_ngl"
}